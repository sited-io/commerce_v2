// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sited_io/media/v2/media_service.proto (package sited_io.media.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { File } from "./file_pb.js";

/**
 * @generated from message sited_io.media.v2.UploadFileRequest
 */
export class UploadFileRequest extends Message<UploadFileRequest> {
  /**
   * @generated from field: string content_type = 1;
   */
  contentType = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v2.UploadFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFileRequest | PlainMessage<UploadFileRequest> | undefined, b: UploadFileRequest | PlainMessage<UploadFileRequest> | undefined): boolean {
    return proto3.util.equals(UploadFileRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v2.UploadFileResponse
 */
export class UploadFileResponse extends Message<UploadFileResponse> {
  /**
   * @generated from field: sited_io.media.v2.File file = 1;
   */
  file?: File;

  constructor(data?: PartialMessage<UploadFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v2.UploadFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "message", T: File },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFileResponse {
    return new UploadFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFileResponse {
    return new UploadFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFileResponse {
    return new UploadFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFileResponse | PlainMessage<UploadFileResponse> | undefined, b: UploadFileResponse | PlainMessage<UploadFileResponse> | undefined): boolean {
    return proto3.util.equals(UploadFileResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v2.DeleteFileRequest
 */
export class DeleteFileRequest extends Message<DeleteFileRequest> {
  constructor(data?: PartialMessage<DeleteFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v2.DeleteFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined, b: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFileRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v2.DeleteFileResponse
 */
export class DeleteFileResponse extends Message<DeleteFileResponse> {
  constructor(data?: PartialMessage<DeleteFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v2.DeleteFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined, b: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFileResponse, a, b);
  }
}

